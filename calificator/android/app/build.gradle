def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'com.chaquo.python'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    compileSdkVersion flutter.compileSdkVersion
    ndkVersion flutter.ndkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    lintOptions {
        abortOnError false
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "io.flutter.calificator"
        // You can update the following values to match your application needs.
        // For more information, see: https://docs.flutter.dev/deployment/android#reviewing-the-gradle-build-configuration.
        minSdkVersion flutter.minSdkVersion
        //minSdkVersion flutter.minSdkVersion
        targetSdkVersion flutter.targetSdkVersion
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName

        ndk {
            abiFilters 'x86', 'x86_64', 'armeabi-v7a', 'arm64-v8a'

        }

        python {
            buildPython "/home/linuxbrew/.linuxbrew/opt/python@3.8/bin/python3.8"
            pip {
                install "opencv-python"
                install "imageio==2.13.3"
                install "numpy==1.19.5"
                install "scipy==1.4.1"
                install "scikit-image==0.16.2"
                install "pillow==8.4.0"
                install "tensorflow"
            }
        }
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.debug
        }
    }

    androidResources {
        noCompress 'tflite', 'png'
    }
    namespace 'io.flutter.calificator'
}

flutter {
    source '../..'
}

dependencies {

    //def tfl_version = "0.0.0-nightly"
    def tfl_version = "2.8.0"

    //def tflsupp_version = "0.0.0-nightly"
    def tflsupp_version = "0.3.1"

    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.3.0'
    //noinspection GradleCompatible
    implementation'com.android.support:design:29.0.0'
    implementation 'com.android.support:support-annotations:29.0.0'
    //noinspection GradleCompatible
    implementation'com.android.support:support-v4:29.0.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'androidx.annotation:annotation:1.2.0'

//    implementation 'com.android.volley:volley:1.1.1'
//    implementation 'com.google.code.gson:gson:2.8.5'
//    implementation('org.apache.httpcomponents:httpmime:4.3.6') {
//        exclude module: 'httpclient'
//    }
//    implementation 'org.apache.httpcomponents:httpclient-android:4.3.5'


    implementation 'com.squareup.retrofit2:retrofit:2.1.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.1.0'
    implementation 'com.squareup.picasso:picasso:2.5.2'

    //testImplementation 'junit:junit:4.12'
    //androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    //androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'

    implementation("org.tensorflow:tensorflow-lite:${tfl_version}") { changing = true }
    implementation("org.tensorflow:tensorflow-lite-gpu:${tfl_version}") { changing = true }
    implementation("org.tensorflow:tensorflow-lite-support:${tflsupp_version}") { changing = true }

}
